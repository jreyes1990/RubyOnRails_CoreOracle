-- USO DE YARN
   -- SB-ADMINS-2, enlace: https://yarnpkg.com/package/startbootstrap-sb-admin-2
      yarn add startbootstrap-sb-admin-2
      
   -- POPPER, enlace: https://yarnpkg.com/package/@popperjs/core
      yarn add @popperjs/core
      
   -- DATATABLES.NET, enlace: https://yarnpkg.com/package/datatables.net
      yarn add datatables.net
      
   -- DATATABLES.NET-BUTTONS-BS4, enlace: https://yarnpkg.com/package/datatables.net-buttons-bs4
      yarn add datatables.net-buttons-bs4
      
   -- PDFMAKE, enlace: https://yarnpkg.com/package/pdfmake
      yarn add pdfmake

   -- SELECT2-BOOTSTRAP4, enlace: https://yarnpkg.com/package/@ttskch/select2-bootstrap4-theme
      yarn add @ttskch/select2-bootstrap4-theme

   -- INSTALACION REDIS, Enlace: https://stackoverflow.com/questions/58918869/ruby-on-rails-operation-now-in-progress-connect2-would-block

   -- STIMULUS-REFLEX, Enlace: https://docs.stimulusreflex.com/hello-world/setup
      yarn add stimulus_reflex

   -- SWEETALERT2, Enlace: https://www.youtube.com/watch?v=Nwy4c57hibM
   --              Enlace: https://sweetalert2.github.io/
   --              Enlace: https://codigonautas.com/creacion-de-bonitos-mensajes-emergentes-con-sweetalert2/
       yarn add sweetalert2

   -- ROW-GROUPING, Enlace: https://yarnpkg.com/package/datatables.net-rowgroup-bs4
      https://cdn.datatables.net/
      yarn add datatables.net-rowgroup-bs4@1.2.0

   -- DATATABLE-RESPONSIVE: Enlace, https://www.youtube.com/watch?v=HIDn_HpEuEQ
      Se instalo datatables.net-responsive-bs4 para tener una tabla responsiva
      yarn add datatables.net-responsive-bs4

   -- BOOTSTRAP-POPOVER-TOOLTIP: Enlace, https://github.com/andreivictor/bootstrap-tooltip-custom-class
      yarn add bootstrap-tooltip-custom-class

   -- GENERAR ACTION_TEXT, Enlace: https://bswan0002.medium.com/how-to-set-up-action-text-rich-text-editor-in-rails-6-ab91be81e647
      rails action_text:install

      rails active_storage:install

   -- INSTALACIÓN PAQUETES PARA ACTION_TEXT
      sudo apt-get -y install imagemagick
      sudo apt-get -y install libmagic-dev
      sudo apt-get -y install libmagickwand-dev


   -- GENERAR STIMULUS_REFLEX PARA SWEETALERT2
      rails generate stimulus_reflex sweetalert

   -- DROPZONE.JS, Enlace: https://www.youtube.com/watch?v=fg_8qJ-su6A
      yarn add dropzone

   -- ACTIVE_STORAGE, Instalacion
      rails active_storage:install

   -- MIGRATIONS
      rails db:migrate

   -- GENERAR STIMULUS_REFLEX PARA DROPZONE
      rails generate stimulus_reflex dropzone

-- USO DE DEVISE

   -- DEVISE, Intalación devise
      rails generate devise:install

   -- DEVISE, Generación modelo devise
      rails generate devise User user_created_id:integer user_updated_id:integer estado:string{10}

   -- DEVISE, Generación controller devise
      rails generate devise:controllers users

   -- DEVISE, Generación views devise
      rails generate devise:views

-- APLICANDO DATATABLE-AJAX
   ajax-datatables-rails: contenedor de los métodos ajax de DataTables que permiten la sincronización con la paginación del lado del servidor en una aplicación de Rails
   Enlace: https://github.com/jbox-web/ajax-datatables-rails

-- GENERANDO SCAFFOLD FONT_AWESOME
   rails generate scaffold font_awesom icono:string{50} prefijo_nombre:string{150} termino:string codigo_css:string{25} tipo_icono:string{50} user_created_id:integer user_updated_id:integer estado:string{10}

-- GENERANDO DATATABLE AJAX FONT_AWESOME
   rails generate datatable font_awesom

-- GENERANDO SCAFFOLD CODIGO_COLOR
   rails generate scaffold codigo_color disenio:string{50} nombre_color:string{100} colores:string{25} codigo_hex:string{25} codigo_rgb:string{50} codigo_hls:string{50} user_created_id:integer user_updated_id:integer estado:string{10}

-- GENERANDO DATATABLE AJAX CODIGO_COLOR
   rails generate datatable codigo_color

-- GENERANDO SCAFFOLD EMPRESA
   rails generate scaffold empresa codigo_empresa:integer nombre:string{200} descripcion:string user_created_id:integer user_updated_id:integer estado:string{10}

-- GENERANDO SCAFFOLD AREA
   rails generate scaffold area codigo_area:integer nombre:string{200} codigo_hex:string descripcion:string user_created_id:integer user_updated_id:integer estado:string{10} empresa:references

-- GENERANDO VISTA AREA CON SCENIC 
   rails generate scenic:view areas_views

-- GENERANDO DATATABLE AJAX ÁREA
   rails generate datatable area

-- GENERANDO SCAFFOLD ATRIBUTO
   rails generate scaffold atributo nombre:string{200} descripcion:string user_created_id:integer user_updated_id:integer estado:string{10}

-- GENERANDO SCAFFOLD COMPONENTE
   rails generate scaffold componente nombre:string{200} descripcion:string user_created_id:integer user_updated_id:integer estado:string{10}

-- GENERANDO DATATABLE AJAX COMPONENTE
   rails generate datatable componente

-- GENERANDO SCAFFOLD MENU
   rails generate scaffold menu nombre:string{200} descripcion:string icono:string{50} codigo_hex:string user_created_id:integer user_updated_id:integer estado:string{10}

-- GENERANDO SCAFFOLD ROL
   rails generate scaffold rol nombre:string{200} descripcion:string codigo_hex:string user_created_id:integer user_updated_id:integer estado:string{10}

-- GENERANDO SCAFFOLD OPCION
   rails generate scaffold opcion nombre:string{200} descripcion:string icono:string{50} path:string controlador:string{300} codigo_hex:string user_created_id:integer user_updated_id:integer estado:string{10} menu:references

-- GENERANDO VISTA OPCION CON SCENIC 
   rails generate scenic:view opciones_views

-- GENERANDO DATATABLE AJAX OPCION
   rails generate datatable opcion

-- GENERANDO SCAFFOLD MENU_ROL
   rails generate scaffold menu_rol menu_id:integer descripcion:string user_created_id:integer user_updated_id:integer estado:string{10} opcion:references rol:references

-- GENERANDO VISTA MENU_ROL CON SCENIC 
   rails generate scenic:view menu_roles_views

-- GENERANDO DATATABLE AJAX MENU_ROL
   rails generate datatable menu_rol

-- GENERANDO SCAFFOLD OPCION_CA
   rails generate scaffold opcion_ca descripcion:string user_created_id:integer user_updated_id:integer estado:string{10} opcion:references componente:references atributo:references

-- GENERANDO VISTA OPCION_CA CON SCENIC 
   rails generate scenic:view opcion_cas_views

-- GENERANDO DATATABLE AJAX OPCION_CA
   rails generate datatable opcion_ca

-- GENERANDO MODEL PERSONA
   rails generate model persona nombre:string{200} apellido:string{200} foto:string telefono:integer direccion:string token:string{1000} user_created_id:integer user_updated_id:integer estado:string{10} user:references

-- GENERANDO CONTROLLER PERSONAS
   rails generate controller personas show edit

-- GENERANDO CONTROLLER USUARIOS
   rails generate controller usuarios index

-- GENERANDO SCAFFOLD PERSONAS_AREA
   rails generate scaffold personas_area descripcion:string user_created_id:integer user_updated_id:integer estado:string{10} persona:references area:references

-- GENERANDO VISTA PERSONAS_AREA CON SCENIC 
   rails generate scenic:view personas_areas_views

-- GENERANDO DATATABLE AJAX PERSONAS_AREA
   rails generate datatable personas_area

-- GENERANDO MODEL PARAMETROS
   rails generate model parametro area_id:integer nombre_area:string empresa_id:integer nombre_empresa:string ruta_predeterminada:string view_default:string user:references

-- GENERANDO SCAFFOLD PERSONA_EMPRESA_FORMULARIO
   rails generate scaffold persona_empresa_formulario descripcion:string user_created_id:integer user_updated_id:integer estado:string{10} personas_area:references opcion_ca:references

-- GENERANDO VISTA PERSONA_EMPRESA_FORMULARIO CON SCENIC 
   rails generate scenic:view persona_empresa_formularios_views

-- PARA CREAR UN MODAL SE NECESITA LO SIGUIENTE
   1. Crear un metodo con el formato .js
   2. Crear un partial
   3. Crear la llamada del partial con formato .js
   4. Crear la ruta del partial

-- ENVIO DE CORREO AL CREAR UN USUARIO
   -- Primero, configurar el entorno de email
      -- Crear un archivo en la siguiente ruta => config/initializers/config_email.rb
         Dentro del archivo, pegar el siguiente codigo.

         Rails.application.configure do
         # config/environments/development.rb o config/environments/production.rb
         config.action_mailer.perform_caching = false
         config.assets.raise_runtime_errors = true
         config.action_mailer.raise_delivery_errors = true
         config.action_mailer.perform_deliveries = true
         config.action_mailer.delivery_method = :smtp       # Establece el método de entrega de correo electrónico, en este caso, SMTP
         config.action_mailer.default :charset => "utf-8"

         # Configuración específica para el servidor SMTP de Gmail
         config.action_mailer.smtp_settings = {
            address: "smtp.gmail.com",                # Reemplaza con la dirección del servidor SMTP que utilizarás
            port: 587,                                # Reemplaza con el puerto adecuado
            domain: "madretierra.com.gt",             # Reemplaza con tu propio dominio
            user_name: "jreyes@madretierra.com.gt",   # Reemplaza con tu propio correo electrónico de Gmail
            password: "Jarl@1990",                    # Reemplaza con tu propia contraseña de Gmail
            authentication: "plain",
            enable_starttls_auto: true,
            openssl_verify_mode: "none"
         }

         # Configura las opciones de URL predeterminadas para generar URLs en los correos electrónicos
         config.action_mailer.default_url_options = { :host => "localhost:3000" }
      end

      -- Despues, generar un Mailer en rails.
         rails generate mailer UserMailer

      -- Esto generará una serie de archivos, incluyendo app/mailers/user_mailer.rb y app/views/user_mailer. 
         Puedes editar el archivo app/mailers/user_mailer.rb de la siguiente manera.
#        class UsuarioMailer < ApplicationMailer
#           default from: 'jreyes@madretierra.com.gt'  # Cambia según tu configuración

#           def registro_exitoso(correo_electronico)
#              @usuario = correo_electronico
#              mail(to: @usuario, subject: 'Registro exitoso, puede acceder a la siguiente rutal, http://localhost:3000') # Personaliza el asunto del correo
#           end
#        end

      -- Luego, puedes crear la vista del correo electrónico en app/views/user_mailer/welcome_email.html.erb. 
         Aquí puedes diseñar el contenido del correo electrónico de bienvenida. Por ejemplo
         <h1>Bienvenido a la aplicación</h1>
         <p>Hola <%= @user.name %>,</p>
         <p>Gracias por registrarte en nuestra aplicación.</p>

      -- Por último, en tu controlador de usuarios (por ejemplo, app/controllers/users_controller.rb), 
         en la acción donde creas el usuario, puedes llamar al mailer para enviar el correo electrónico. Por ejemplo.
         class UsersController < ApplicationController
         def create
            @user = User.new(user_params)
            if @user.save
               # Envía el correo electrónico de bienvenida
               UserMailer.welcome_email(@user).deliver_now

               # Resto del código para redireccionar o mostrar un mensaje de éxito
            else
               # Resto del código para manejar el caso de error en la creación del usuario
            end
         end

         private

            def user_params
               # Parámetros permitidos para la creación del usuario
            end
         end

-- ENVIO DE MENSAJE POR TELEGRAM AL CREAR UN USUARIO
   -- 1. Agregar la gema en 'Gemfile'
      gem 'telegram-bot-ruby'

   -- 2. Crea un archivo telegram_bot.rb en la carpeta config/initializers de tu aplicación Rails y configura el bot de Telegram.
      require 'telegram/bot'

      Telegram::Bot::Client.run('YOUR_TELEGRAM_BOT_TOKEN') do |bot|
         $telegram_bot = bot
      end

   -- 3. En tu controlador de usuarios (app/controllers/users_controller.rb), en el método create, después de guardar el nuevo usuario, puedes enviar un mensaje a través de Telegram
      # Envía un mensaje a través de Telegram
      message = "Bienvenido a nuestro sistema: \n\nHola <strong>#{@nombre_completo}</strong>!.\nHas sido registrado con éxito en nuestra aplicación.\nEmpresa: <strong>#{@consulta_area.nombre_empresa}</strong>\nÁrea: <strong>#{@consulta_area.nombre}</strong>\nEmail: <strong>#{@usuario.email}</strong>\nContraseña: <strong>#{@usuario.password}</strong>\n\n<strong>NOTA: </strong>\n\nPor favor, cambia tu contraseña lo antes posible después de iniciar sesión por primera vez.\n\nSi tienes alguna pregunta, no dudes en contactarnos.".html_safe
      $telegram_bot.api.send_message(chat_id: params[:usuario_form][:chat_id_telegram], text: message, parse_mode: 'HTML')



-- GENERAR CONTRASEÑA TEMPORAL AUTOMATICAMENTE
   -- Primero, vamos agregar la siguiente gema
      # Para generar una contraseña temporal automática
      gem 'securerandom'
   -- Segundo, vamos agregar el siguiente codigo en la siguiente ruta /app/helpers/utilidades/
      require 'securerandom'

      def generate_secure_password(length = 12)
         chars = ('A'..'Z').to_a + ('a'..'z').to_a + ('0'..'9').to_a + ['!', '@', '#', '$', '%', '^', '&', '*']
         password = (1..length).map { chars.sample }.join
      end

-- VALIDAR SI LA CONEXION A INTERNET ESTA ACTIVA.
   -- Para verificar si tienes conexión a Internet antes de enviar el correo, puedes hacer una solicitud a un servidor en línea y verificar si recibes una respuesta exitosa.
   require 'net/http'

   def internet_connection_available?
      url = URI.parse('https://www.google.com')
      http = Net::HTTP.new(url.host, url.port)
      http.use_ssl = (url.scheme == 'https')
      http.open_timeout = 5  --Establece un tiempo de espera para la conexión (en segundos)
      response = http.start { |http| http.head('/') } rescue nil

      return !response.nil? && response.is_a?(Net::HTTPOK)
   end

   -- Puedes utilizar esta función antes de enviar el correo para asegurarte de que haya conexión.
   if internet_connection_available?
      -- Código para enviar el correo
   else
      -- Código para manejar el caso de falta de conexión
   end

-- Precompilación de assets => asegúrate de que los assets (incluyendo las imágenes) se hayan precompilado correctamente antes de desplegar la aplicación.
   1. Limpia la caché de bundler => Ejecuta el siguiente comando para limpiar la caché de bundler
      bundle clean --force

   2. Actualiza bundler => Actualiza la gema de bundler a la versión más reciente con el siguiente comando.
      gem update bundler

   3. Reinstala las gemas => Después de actualizar bundler, reinstala todas las gemas especificadas en tu Gemfile.
      bundle install

   4. Ejecuta el comando con bundle exec => Después de reinstalar las gemas, intenta nuevamente ejecutar el comando con bundle exec para asegurarte de que estás utilizando las versiones correctas de las gemas según lo especificado en tu Gemfile.
      bundle exec rake assets:clobber

   5. Verifica la integración con Rails => Asegúrate de que tu aplicación Rails esté correctamente configurada para servir los assets estáticos. Verifica que la configuración de config/environments/development.rb incluya la siguiente línea.
      config.serve_static_assets = true

   6. Verifica la precompilación de assets => En un entorno de desarrollo, los assets deben precompilarse antes de que se sirvan. Asegúrate de que la precompilación de assets se haya realizado correctamente ejecutando el siguiente comando.
      RAILS_ENV=development bundle exec rake assets:precompile

#  Cómo implementar autenticación a dos pasos con Rails y Devise (2FA)
   0. Documentacion => Devise-Two-Factor Authentication
      ENLACE => https://github.com/devise-two-factor/devise-two-factor
      VIDEO  => https://www.youtube.com/watch?v=yUjU0okqQfQ


   1. Agregue Devise-Two-Factor a su Gemfile
      gem 'devise-two-factor'

      1.0. Eliminamos la migration
           rake db:migrate:down VERSION=20231012215531

      1.0. Destruimos la migration generado
           rails d migration AddTwoFactorFieldsToUsers
           
      1.1. Excluidos de la migration anterior
           add_column :users, :encrypted_otp_secret, :string
           add_index :users, :encrypted_otp_secret, unique: true # Asegura la unicidad
           add_column :users, :encrypted_otp_secret_iv, :string
           add_column :users, :encrypted_otp_secret_salt, :string
   
   2. Agregar el generador de devise two factor, junto con la variable de entorno
      rails generate devise_two_factor User OTP_SECRET_ENCRYPTION_KEY

   3. Ejecutar el proceso de configuracion
      rails db:migrate

   4. Ejecutar la OTP_SECRET_ENCRYPTION_KEY
      OTP_SECRET_ENCRYPTION_KEY=12345dfdf545fgfgggh54g21h54g5hhjjh54 rails server

#  Como leer los correos electronicos sin tener que enviarlos
   0. Documentacion => letter_opener
      ENLACE => https://github.com/ryanb/letter_opener
      VIDEO  => https://webcrunch.com/posts/using-the-letter_opener-gem-with-ruby-on-rails
      
   1. Agregue letter_opener a su Gemfile
      gem "letter_opener", group: :development

   2. Generar un Mailer enviar el codigo de Authentication
      rails generate mailer UsuarioCode send_code

